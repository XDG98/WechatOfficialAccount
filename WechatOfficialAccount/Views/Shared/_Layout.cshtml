@using System.Net
@using WechatOfficialAccount.Controllers
@using WechatOfficialAccount.Models.DTO
@using static WechatOfficialAccount.Controllers.NavBarController
@using WechatOfficialAccount.Helper

<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - WechatOfficialAccount</title>
    @*bootstrap样式 CDN引入*@
    @*<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">*@
    @*bootstrap图标库 CDN引入*@
    @*<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.2/font/bootstrap-icons.css">*@
    @*bootstrap-table样式 CDN引入*@
    @*<link rel="stylesheet" href="https://unpkg.com/bootstrap-table@1.15.3/dist/bootstrap-table.min.css">*@

    @*bootstrap样式 本地引入*@
    <link rel="stylesheet" href="~/lib/bootstrap-5.1.3-dist/css/bootstrap.min.css" />
    @*bootstrap样式 本地引入*@
    <link rel="stylesheet" href="~/lib/bootstrap-5.1.3-dist/bootstrap-icons-1.8.3/bootstrap-icons.css" />
    @*bootstrap-table样式 本地引入*@
    <link rel="stylesheet" href="~/lib/bootstrap-table/bootstrap-table.min.css">

    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/WechatOfficialAccount.styles.css" asp-append-version="true" />
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-lg navbar-light bg-light">
            <div class="container-fluid">
                <a class="navbar-brand" asp-controller="Home" asp-action="Index">
                    <i class="bi bi-bootstrap"></i>
                </a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarScroll" aria-controls="navbarScroll" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarScroll">
                    <ul class="navbar-nav me-auto my-2 my-lg-0 navbar-nav-scroll" style="--bs-scroll-height: 100px;">
                        @{
                            Result result = await new NavBarController().GetNavBarList();
                            if (result.Code == System.Net.HttpStatusCode.OK && result.Data != null)
                            {
                                Dictionary<string, List<GetNavBarListDto>> navBarDic = result.Data as Dictionary<string, List<GetNavBarListDto>>;
                                foreach (var navBar in navBarDic)
                                {
                                    if (navBar.Value.Count == 1 && navBar.Value[0].Name == navBar.Key)
                                    {
                                        <li class="nav-item">
                                            @if (@navBar.Value[0].IsEnable)
                                            {
                                                <a class="nav-link" asp-controller="@navBar.Value[0].AspController" asp-action="@navBar.Value[0].AspAction">@navBar.Key</a>
                                            }
                                            else
                                            {
                                                <a class="nav-link disabled" asp-controller="@navBar.Value[0].AspController" asp-action="@navBar.Value[0].AspAction">@navBar.Key</a>
                                            }
                                        </li>
                                    }
                                    else
                                    {
                                        <li class="nav-item dropdown">
                                            <a class="nav-link dropdown-toggle" href="#" id="navbarScrollingDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">@navBar.Key</a>
                                            <ul class="dropdown-menu" aria-labelledby="navbarScrollingDropdown">
                                                @foreach (var item in navBar.Value)
                                                {
                                                    if (@item.IsEnable)
                                                    {
                                                        <li><a class="dropdown-item" asp-controller="@item.AspController" asp-action="@item.AspAction"><i class="bi bi-@item.Icon"></i>&nbsp;&nbsp;@item.Name</a></li>
                                                    }
                                                    else
                                                    {
                                                        <li><a class="dropdown-item disabled" asp-controller="@item.AspController" asp-action="@item.AspAction"><i class="bi bi-@item.Icon"></i>&nbsp;&nbsp;@item.Name</a></li>
                                                    }
                                                }
                                            </ul>
                                        </li>
                                    }
                                }
                            }
                        }
                        <li class="nav-item">
                            <a class="nav-link disabled">更多新功能玩命开发中...</a>
                        </li>
                    </ul>
                    <div id="he-plugin-simple"></div>
                </div>
            </div>
        </nav>
    </header>

    <div class="modal fade" id="MyModal" tabindex="-1" aria-labelledby="MyModalTitle" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div id="MyModalAlert" role="alert" style="display: none;">
                <i></i>&nbsp;
                <label></label>
                <button type="button" class="btn-close" onclick="$('#MyModalAlert').hide();" aria-label="Close"></button>
            </div>
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="MyModalTitle">模态窗标题</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="MyModalForm">
                        @if (ViewData["MyModalPartialForm"] != null && !string.IsNullOrEmpty(ViewData["MyModalPartialForm"].ToString()))
                        {
                            @Html.Partial(ViewData["MyModalPartialForm"].ToString())
                        }
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">关闭</button>
                    <a hidden id="MyModalSaveUrl"></a>
                    <button type="button" id="MyModalSaveButton" class="btn btn-primary" onclick="Save()">保存</button>
                </div>
            </div>
        </div>
    </div>

    <div class="container mt-1">
        <div id="liveAlertPlaceholder"></div>
        <button type="button" class="btn btn-primary" onclick="Alert('hdygn和德国法国吃饭','danger')">显示警告框（alert）</button>

        @*@*提示框占位*@
        <div id="MyDefaultAlertAlert" role="alert" style="display: none;">
            <i></i>&nbsp;
            <label></label>
            <button type="button" class="btn-close" onclick="$('#MyDefaultAlertAlert').hide();" aria-label="Close"></button>
        </div>

        <main role="main" class="pb-3">
            @RenderBody()
        </main>

        @*推送通知*@
        <div class="position-fixed bottom-0 end-0 p-3">
            <div id="MyToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="toast-header">
                    <img src="@AppSettingsHelper.GetSystemConfig("ImgUrl")" width="66" class="rounded me-2" alt="...">
                    <strong class="me-auto">系统消息</strong>
                    <small>@DateTime.Now</small>
                    <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
                <div class="toast-body">
                    Hello, world! This is a toast message.
                </div>
            </div>
        </div>

        <button type="button" class="btn btn-primary" onclick="@Html.PartialAsync("_FormModal.cshtml")">加载组件</button>
        <button type="button" class="btn btn-primary" onclick="Toast()">推送通知</button>
        <button type="button" class="btn btn-info" onclick="AlertSuccess(AlertChoose.DefaultAlert, '成功提示！')">成功提示</button>
        <button type="button" class="btn btn-warning" onclick="AlertFail(AlertChoose.DefaultAlert, '失败提示！')">失败提示</button>
        <button type="button" class="btn btn-danger" onclick="AlertError(AlertChoose.DefaultAlert, '错误提示！')">错误提示</button>
    </div>

    <footer class="border-top footer text-center">
        <div class="container">
            &copy; @DateTime.Now.Year - WechatOfficialAccount
        </div>
    </footer>

    @*jquery CDN引入*@
    @*<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>*@
    @*bootstrap和js集成 CDN引入*@
    @*<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>*@
    @*bootstrap CDN引入*@
    @*<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.min.js"></script>*@
    @*bootstrap-table CDN引入*@
    @*<script src="https://unpkg.com/bootstrap-table@1.15.3/dist/bootstrap-table.min.js"></script>*@

    @*jquery 本地引入*@
    <script src="~/lib/jquery/jquery-3.6.0.min.js"></script>
    @*bootstrap和js集成 本地引入*@
    @*<script src="~/lib/bootstrap-5.1.3-dist/js/bootstrap.bundle.min.js"></script>*@
    @*bootstrap 本地引入*@
    <script src="~/lib/bootstrap-5.1.3-dist/js/bootstrap.min.js"></script>
    @*bootstrap-table 本地引入*@
    <script src="~/lib/bootstrap-table/bootstrap-table.min.js"></script>
    @*bootstrap中文 本地引入*@
    <script src="~/lib/bootstrap-table/locale/bootstrap-table-zh-CN.js"></script>
    @*bootstrap英文 本地引入*@
    <script src="~/lib/bootstrap-table/locale/bootstrap-table-en-US.js"></script>

    <script src="~/js/site.js" asp-append-version="true"></script>
    <script src="https://widget.qweather.net/simple/static/js/he-simple-common.js?v=2.0"></script>
    <script>

        var alertPlaceholder = $("#liveAlertPlaceholder");
        function Alert(message, type) {
            var wrapper = document.createElement('div');
            var timestamp = Date.now();
            console.log(timestamp);
            wrapper.innerHTML = '<div id="' + timestamp + '" class="alert alert-' + type + ' alert-dismissible fade show" role="alert">' +
                '<i class="bi bi-info-circle-fill"></i>&nbsp;&nbsp;' + message +
                '<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>' +
                '</div>';
            alertPlaceholder.append(wrapper);

            setTimeout(function() {
                $("#" + timestamp).alert("close");
            }, @AppSettingsHelper.GetSystemConfig("AlertTime"));
        }

        /**
         * 和风天气组件
         */
        WIDGET = {
            "CONFIG": {
                "modules": "01234",
                "background": "1",
                "tmpColor": "FFFFFF",
                "tmpSize": "16",
                "cityColor": "FFFFFF",
                "citySize": "16",
                "aqiColor": "FFFFFF",
                "aqiSize": "16",
                "weatherIconSize": "24",
                "alertIconSize": "18",
                "padding": "10px 10px 10px 10px",
                "shadow": "0",
                "language": "auto",
                "borderRadius": "5",
                "fixed": "false",
                "vertical": "top",
                "horizontal": "left",
                "key": "4afdf019eb9b4b7098624e6b9167481e"
            }
        }

        //dataTable方法
        //#region dataTable方法
        // 方法1： 刷新（重新加载数据）
        function DATaTableReLoad1() {
            $('#DataTable').bootstrapTable('destroy');
        }
        // 方法2： 刷新（重新加载数据）
        function DATaTableReLoad2() {
            $("#DataTable").bootstrapTable('refreshOptions', { pageNumber: 1 });  // pageNumber:1, 指定页码为第1页
            $("#DataTable").bootstrapTable('refresh');
        }
        // 方法3（推荐）： 跳转到第1页（包含查询和重新加载）
        function DATaTableReLoadPage() {
            $("#DataTable").bootstrapTable('selectPage', 1);
        }
        //#endregion
        
        //模态窗
        //#region 模态窗
        /**
         * 模态窗
         */
        var myModal = $("#MyModal");
        myModal.on('show.bs.modal', function(event) {
            var button = event.relatedTarget;

            //标题
            $('#MyModalTitle').html(button.getAttribute('data-bs-MyModalTitle'));
            //保存按钮Url
            var myModalSaveUrl = button.getAttribute('data-bs-MyModalSaveUrl');
            $('#MyModalSaveUrl').val(myModalSaveUrl);
            if (!myModalSaveUrl) {
                //不是编辑隐藏保存按钮
                $("#MyModalSaveButton").hide();
            }

            var modalForm = $("#MyModalForm").serializeArray();
            modalForm.forEach(function(element) {
                //获取
                $('#' + element.name).val(button.getAttribute('data-bs-' + element.name));
            })
        })
        /**
         * 模态窗保存
         */
        function Save() {
            var myModalSaveUrl = $("#MyModalSaveUrl").val();
            var parameter = {};
            var myModalForm = $("#MyModalForm").serializeArray();
            myModalForm.forEach(function(element) {
                parameter[element.name] = element.value;
            })
            console.log(parameter);
            $.post({
                url: myModalSaveUrl,
                contentType: "application/json;charset=UTF-8",
                data: JSON.stringify(parameter),
                success: function(res) {
                    //隐藏窗口
                    $('#MyModal').modal('hide');
                    DATaTableReLoadPage();
                    DefaultAlert(res);
                }
            })
        }
        //#endregion
        
        //推送通知
        //#region 推送通知
        var toastTrigger = document.getElementById('liveToastBtn');
        var toastLiveExample = document.getElementById('MyToast');
        if (toastTrigger) {
            toastTrigger.addEventListener('click', function() {
                var toast = new bootstrap.Toast(toastLiveExample);
                toast.show();
            })
        }
        /**
         * 推送通知
         */
        function Toast() {
            var myToast = $('#MyToast');
            var toastBody = myToast.find("div[class=toast-body]");
            toastBody.html("通知内容");
            var myToast = new bootstrap.Toast(myToast);
            myToast.show();
        }
        //#endregion

        /**
         * 默认提示
         * res：响应结果
         */
        function DefaultAlert(res) {
            switch (res.code) {
                case @HttpStatusCode.OK.GetHashCode():
                    AlertSuccess(AlertChoose.DefaultAlert, "操作成功！");
                    break;
                case @HttpStatusCode.BadRequest.GetHashCode():
                    AlertFail(AlertChoose.DefaultAlert, res.message);
                    break;
                case @HttpStatusCode.InternalServerError.GetHashCode():
                    AlertError(AlertChoose.DefaultAlert, res.message);
                    break;
            }
        }
        /**
         * 模态窗提示
         * res：响应结果
         */
        function ModalAlert(res) {
            switch (res.code) {
                case @HttpStatusCode.OK.GetHashCode():
                    AlertSuccess(AlertChoose.ModalAlert, "操作成功！");
                    break;
                case @HttpStatusCode.BadRequest.GetHashCode():
                    AlertFail(AlertChoose.ModalAlert, res.message);
                    break;
                case @HttpStatusCode.InternalServerError.GetHashCode():
                    AlertError(AlertChoose.ModalAlert, res.message);
                    break;
            }
        }

        /**
         * 成功提示
         * type: 提示选择 AlertChoose.DefaultAlert 默认提示，AlertChoose.ModalAlert 模态窗内提示
         * content：提示内容
         */
        function AlertSuccess(alertChoose, content) {
            DefinedAlert(alertChoose, AlertType.Success, AlertIcon.Success, content);
        }
        /**
         * 失败提示
         * content：提示内容
         */
        function AlertFail(alertChoose, content) {
            DefinedAlert(alertChoose, AlertType.Warning, AlertIcon.Warning, content);
        }
        /**
         * 错误提示
         * content：提示内容
         */
        function AlertError(alertChoose, content) {
            DefinedAlert(alertChoose, AlertType.Danger, AlertIcon.Danger, content);
        }

        /**
         * 自定义提示
         * type: 1.默认提示，2.模态窗提示
         * alertType：提示类型
         * alertIcon：提示图标
         * content：提示内容
         */
        function DefinedAlert(alertChoose, alertType, alertIcon, content) {
            var myAlert;
            switch (alertChoose) {
                case AlertChoose.DefaultAlert:
                    myAlert = $('#MyDefaultAlertAlert');
                    break;
                case AlertChoose.ModalAlert:
                    myAlert = $('#MyModalAlert');
                    break;
            }

            myAlert.addClass("alert alert-" + alertType + " alert-dismissible fade show");
            var myAlertIcon = myAlert.find("i");
            myAlertIcon.addClass("bi bi-" + alertIcon);
            var myAlertContent = myAlert.find("label");
            myAlertContent.html(content);
            myAlert.show();

            setTimeout(function() {
                myAlert.removeClass();
                myAlertIcon.removeClass();
                myAlertContent.html("");
                myAlert.hide();
            }, @AppSettingsHelper.GetSystemConfig("AlertTime"));
        }

        /**
         * 自定义提示
         * type: 1.默认提示，2.模态窗提示
         * alertType：提示类型
         * alertIcon：提示图标
         * content：提示内容
         */
        function DefinedAlert(alertChoose, alertType, alertIcon, content) {
            switch (alertChoose) {
                case AlertChoose.DefaultAlert:
                    myAlert = $('#MyDefaultAlertAlert');
                    break;
                case AlertChoose.ModalAlert:
                    myAlert = $('#MyModalAlert');
                    break;
            }

            var wrapper = document.createElement('div');
            var timestamp = Date.now();
            console.log(timestamp);
            wrapper.innerHTML = '<div id="' + timestamp + '" class="alert alert-' + alertType + ' alert-dismissible fade show" role="alert">' +
                '<i class="bi bi-info-circle-fill"></i>&nbsp;&nbsp;' + message +
                '<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>' +
                '</div>';
            alertPlaceholder.append(wrapper);

            setTimeout(function() {
                $("#" + timestamp).alert("close");
            }, @AppSettingsHelper.GetSystemConfig("AlertTime"));
        }

        /**
         * 时间戳转时间
         * timestamp：时间戳
         */
        function TimestampToTime(timestamp) {
            timestamp = timestamp.toString();
            if (timestamp.length <= 10) {
                timestamp = timestamp * 1000;
            }
            var date = new Date(timestamp);//时间戳为10位需*1000，时间戳为13位的话不需乘1000
            var Y = date.getFullYear() + '-';
            var M = (date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1) + '-';
            var D = date.getDate() + ' ';
            var h = date.getHours() + ':';
            var m = date.getMinutes() + ':';
            var s = date.getSeconds() + '.';
            var ms = date.getMilliseconds();
            var time = Y + M + D + h + m + s + ms;
            return time;
        }

        /**
         * 获取常量描述（异步）
         * cellvalue：单元格值
         * className：常量类名称
         */
        const GetConstDescription = async (cellvalue, className) => {
            var constList = await GetConstDescriptionList(className);
            if (!constList) {
                return cellvalue;
            }
            constList.forEach(function(element) {
                if (cellvalue == element.value) {
                    return element.description;
                }
            })
        }
        /**
         * 获取枚举项（异步）
         * className：常量类名称
         */
        const GetConstDescriptionList = async (className) => {
            return new Promise((resolve, reject) => {
                $.get({
                    url: "/System/GetConstDescriptionList",
                    data: { "className": className },
                    success: function(res) {
                        if (res.code == @HttpStatusCode.OK.GetHashCode()) {
                            resolve(res.data);
                        } else {
                            reject(res);
                        }
                    }
                })
            })
        }

        /**
         * 获取枚举描述（异步）
         * cellvalue：单元格值
         * enumName：枚举名称，类名.枚举名（例：ResponedStatus.ResultEnum）
         */
        const GetEnumDescription = async (cellvalue, enumName) => {
            var enumList = await GetEnumDescriptionList(enumName);
            if (!enumList) {
                return cellvalue;
            }
            enumList.forEach(function(element) {
                if (cellvalue == element.value) {
                    return element.description;
                }
            })
        }
        /**
         * 获取枚举项（异步）
         * enumName：枚举名称，类名.枚举名（例：ResponedStatus.ResultEnum）
         */
        const GetEnumDescriptionList = async (enumName) => {
            return new Promise((resolve, reject) => {
                $.get({
                    url: "/System/GetEnumDescriptionList",
                    data: { "enumName": enumName },
                    success: function(res) {
                        if (res.code == @HttpStatusCode.OK.GetHashCode()) {
                            resolve(res.data);
                        } else {
                            reject(res);
                        }
                    }
                })
            })
        }

        //枚举，常量
        //#region 枚举，常量
        /**
         * 提示类型
         */
        const AlertType = {
            Info: "info",
            Success: "success",
            Warning: "warning",
            Danger: "danger",
        }
        /**
         * 提示图标
         */
        const AlertIcon = {
            Info: "info-circle-fill",
            Success: "check-circle-fill",
            Warning: "exclamation-circle-fill",
            Danger: "exclamation-triangle-fill",
        }
        /**
         * 提示选择
         */
        const AlertChoose = {
            /**
             * 默认提示
             */
            DefaultAlert: 1,
            /**
             * 模态窗内提示，该提示适应模态窗，仅展示于模态窗之内
             */
            ModalAlert: 2,
        }
        //#endregion
        
    </script>
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>
